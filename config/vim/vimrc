let mapleader=" "
set number
set timeoutlen=500
set ignorecase
set smartcase
set history=10000
set relativenumber
set undofile
let g:markdown_fenced_languages = ['json']

nnoremap <leader>f <C-^>
nnoremap n nzz
nnoremap N Nzz
" Remap for dealing with word wrap
"ideaVim ignore
nnoremap <expr> k (v:count == 0 ? 'gk' : 'k')
nnoremap <expr> j (v:count == 0 ? 'gj' : 'j')
"ideaVim ignore end

" Copy to clipboard
nnoremap Y "+y
vnoremap Y "+y

if !has("ide")
    " Go to last used window
    nnoremap <leader>w <c-w><c-p>

    if has("vms")
        set nobackup		" do not keep a backup file, use versions instead
    else
        set backup		" keep a backup file (restore to previous version)
        if has('persistent_undo')
            set undofile	" keep an undo file (undo changes after closing)
        endif
    endif

    if &t_Co > 2 || has("gui_running")
    " Switch on highlighting the last used search pattern.
        set hlsearch
    endif

    " Add optional packages.
    "
    " The matchit plugin makes the % command work better, but it is not backwards
    " compatible.
    " The ! means the package won't be loaded right away but when plugins are
    " loaded during initialization.
    if has('syntax') && has('eval')
        packadd! matchit
    endif

    set backspace=indent,eol,start
    " see for yourself
    " just hit backspace without this one and
    set hidden
    " to misusing tabs
    " buffers simultaneously without resorting
    " allows you to deal with multiple unsaved
    syntax on
    " activates syntax highlighting among other things
    filetype plugin indent on
    " activates filetype detection
    set tabstop=4
    set splitright
    set splitbelow
    set shiftwidth=4
    set expandtab
    set mouse=a
    set shiftround " smart indentation
    set linebreak " wrap line on end of word
    set nolist " don't display whitespace character as text
    set rtp+=/usr/local/opt/fzf
    set updatetime=100
    set termguicolors
endif

function! OpenURLUnderCursor()
  let s:uri = expand('<cWORD>')
  let s:uri = substitute(s:uri, '?', '\\?', '')
  let s:uri = shellescape(s:uri, 1)
  if s:uri != ''
    silent exec "!open '".s:uri."'"
    :redraw!
  endif
endfunction

nnoremap gx :call OpenURLUnderCursor()<CR>
